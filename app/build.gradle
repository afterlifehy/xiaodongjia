plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id 'com.didi.dokit'
}
apply from: '../constants.gradle'
def releasePlatform = release_platform.toInteger()
apply from: "${project.rootDir}/360jiagu.gradle"

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersiontargetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        flavorDimensions "color"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        dexOptions {
            javaMaxHeapSize "4g"
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "085cb6ea6706d319d8383117",//值来自开发者平台取得的AppKey
                JPUSH_CHANNEL: "default_developer",

//                XIAOMI_APPKEY : "5421881092816", // 小米平台注册的appkey
//                XIAOMI_APPID  : "2882303761518810816", // 小米平台注册的appid
//
//                OPPO_APPKEY   : "OP-您的应用对应的 OPPO 的 APPKEY",
//                OPPO_APPID    : "OP-您的应用对应的 OPPO 的 APPID",
//                OPPO_APPSECRET: "OP-您的应用对应的 OPPO 的 APPSECRET",

//                VIVO_APPKEY : "109628259652cb133b11db52ace31ddf", // VIVO平台注册的appkey
//                VIVO_APPID : "104475625", // VIVO平台注册的appid
//
//                MEIZU_APPKEY : "20e9fdb5fbee4e6dafc39ab210149b59", // 魅族平台注册的appkey
//                MEIZU_APPID : "134861" // 魅族平台注册的appid
        ]
        ndk {
            if (releasePlatform == 1) {
                abiFilters 'armeabi-v7a', 'arm64-v8a'//google
            } else if (releasePlatform == 2) {
                abiFilters 'armeabi-v7a'//本地分发
            } else if (releasePlatform == 3) {
                abiFilters 'armeabi-v7a'//内部分发
            }
        }

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }
    viewBinding {
        enabled = true
    }

    //打包名配置
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // 输出apk名称为Demo_V1.0_2019-01-15.apk
            def releaseTime = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
            if (variant.buildType.name.equals('debug')) {
                outputFileName = "${variant.productFlavors[0].name + "-" + releasePlatform + "-" + buildType.name + "-v" + defaultConfig.versionName + "-" + releaseTime}-debug.apk"
            } else {
                outputFileName = "${variant.productFlavors[0].name + "-" + releasePlatform + "-" + buildType.name + "-v" + defaultConfig.versionName + "-" + releaseTime}.apk"
            }
        }
    }


    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }

    signingConfigs {
        release {
            storeFile file("xiaodongjia.jks")
            storePassword "xiaodongjia123"
            keyAlias "xiaodongjia0"
            keyPassword "xiaodongjia123"
        }
        debug {
            storeFile file("xiaodongjia.jks")
            storePassword "xiaodongjia123"
            keyAlias "xiaodongjia0"
            keyPassword "xiaodongjia123"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
            debuggable true
            shrinkResources false
            manifestPlaceholders = [CHANNEL: "def"]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            debuggable false
            shrinkResources true
            manifestPlaceholders = [CHANNEL: "def"]
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
    productFlavors {
        //正式环境
        formal_project {
            signingConfig signingConfigs.release
            buildConfigField 'boolean', 'is_debug', "false"
            buildConfigField 'boolean', 'is_proxy', "false"
        }
        //测试环境
        t_test_project {
            signingConfig signingConfigs.debug
            buildConfigField 'boolean', 'is_debug', "true"
            buildConfigField 'boolean', 'is_proxy', "true"
        }
        //开发环境
        dev_project {
            signingConfig signingConfigs.debug
            buildConfigField 'boolean', 'is_debug', "true"
            buildConfigField 'boolean', 'is_proxy', "true"
        }
        //预发
        pre_project {
            signingConfig signingConfigs.debug
            buildConfigField 'boolean', 'is_debug', "true"
            buildConfigField 'boolean', 'is_proxy', "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dokitExt {
    //通用设置
    comm {
        //地图经纬度开关
        gpsSwitch true
        //网络开关
        networkSwitch true
        //大图开关
        bigImgSwitch true
        //webView js 抓包
        webViewSwitch true
    }

    slowMethod {
        //调用栈模式配置
        stackMethod {
            //默认值为 5ms 小于该值的函数在调用栈中不显示
            thresholdTime 10
            //调用栈函数入口
            enterMethods = ["com.didichuxing.doraemondemo.MainDebugActivity.test1"]
            //黑名单 粒度最小到类 暂不支持到方法
            methodBlacklist = ["com.facebook.drawee.backends.pipeline.Fresco"]
        }
        //普通模式配置
        normalMethod {
            //默认值为 500ms 小于该值的函数在运行时不会在控制台中被打印
            thresholdTime 500
            //需要针对函数插装的包名
            packageNames = ["com.didichuxing.doraemondemo"]
            //不需要针对函数插装的包名&类名
            methodBlacklist = ["com.didichuxing.doraemondemo.dokit"]
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation project(path: ':base')
    //ARouter
    kapt 'com.alibaba:arouter-compiler:1.5.1'

    api 'com.alivc.conan:AlivcConan:1.0.2'
    api 'com.aliyun.video.android:AlivcFFmpeg:1.1.0'
    api 'com.aliyun.sdk.android:AliyunPlayer:4.7.3-part'
    api 'com.aliyun.video.android:core:1.2.2'

    implementation(name: 'AccountPay_1.0.0_20201027', ext: 'aar')

    //极光
    implementation 'cn.jiguang.sdk:jpush:3.8.6'
    implementation 'cn.jiguang.sdk:jcore:2.5.5'
    //极光一键登录
    implementation 'cn.jiguang.sdk:jverification:2.6.4'

    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
//    //华为
//    implementation 'cn.jiguang.sdk.plugin:huawei:3.8.6'
//    implementation 'com.huawei.hms:push:4.0.2.300'
//    //oppo
//    implementation 'cn.jiguang.sdk.plugin:oppo:3.8.6'
    //小米
    // implementation 'cn.jiguang.sdk.plugin:xiaomi:3.8.6'

    implementation project(modulePrefix + 'library-core')
    implementation project(modulePrefix + 'library-dash')
    implementation project(modulePrefix + 'library-ui')
    implementation project(modulePrefix + 'extension-ima')
    implementation project(modulePrefix + 'extension-cronet')
    compileOnly 'org.checkerframework:checker-qual:' + checkerframeworkVersion

    implementation "androidx.viewpager2:viewpager2:1.0.0-alpha01"

    def room_version = "2.3.0-alpha03"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // Kotlin 的话用kapt
    // 如果需要用到 rxjava
    implementation "androidx.room:room-rxjava2:$room_version"
    // 如果需要用到 guava
    implementation "androidx.room:room-guava:$room_version"

    implementation 'com.tencent.bugly:crashreport:latest.release' //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.2.0

}